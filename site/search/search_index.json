{
    "docs": [
        {
            "location": "/intro/",
            "text": "1 Introduction\n\n\nThis document provides a guide to using the bioflows package for various\nworkflows to analyse NGS datasets. Currently, we have implemented one\nstandard RNA-seq workflow and a tutorial is included for analysis of\nRNA-seq data using this package.\n\n\nOne primary objective of the Core is to enable reproducibility in\ncomputational analysis of NGS data and critical to this objective is to\nprovide a consistent software environment across multiple platforms. The\nachieve this goal we are using the following approaches:\n\n\n\n\n\n\nContainer based approach using \ndocker <https://www.docker.com>\n_ for managing the analysis environment\n\n\n\n\n\n\nCONDA <https://conda.io/docs/>\n_ package management system for managing software tools\n\n\n\n\n\n\nBioFlows workflow tool to ensure consistency in analysis steps and stages with interoperability\n\n\n\n\n\n\nacross multiple job submission systems",
            "title": "Introduction"
        },
        {
            "location": "/intro/#1-introduction",
            "text": "This document provides a guide to using the bioflows package for various\nworkflows to analyse NGS datasets. Currently, we have implemented one\nstandard RNA-seq workflow and a tutorial is included for analysis of\nRNA-seq data using this package.  One primary objective of the Core is to enable reproducibility in\ncomputational analysis of NGS data and critical to this objective is to\nprovide a consistent software environment across multiple platforms. The\nachieve this goal we are using the following approaches:    Container based approach using  docker <https://www.docker.com> _ for managing the analysis environment    CONDA <https://conda.io/docs/> _ package management system for managing software tools    BioFlows workflow tool to ensure consistency in analysis steps and stages with interoperability    across multiple job submission systems",
            "title": "1 Introduction"
        },
        {
            "location": "/conda/",
            "text": "1.1 Conda Package Management\n\n\nCONDA is a system agnostic software package management system based on\nthe Anaconda python distribution to ensure that a software and all its\ndependencies are bundled together. These conda packages can be\ndownloaded from various publicly available repositories called\n\nchannels\n and one such channel for bio-informatics tools is bioconda.\n\n\nFor ensuring reproducibily, we have established a publicly accessible\nchannel for all programs that are included with wrappers within the\nbioflows tool accessible through the \ncompbiocore channel <https://anaconda.org/compbiocore/>\n_. In this channel, we have provided conda packages of all software used including\nthe bioflows package itself. To download the packages or the bioflows tool use the command into your conda environment:\n\n\n    conda install -c compbiocore /pkg_name/\n\n\n\n\n\nMore detailed instructions on how to install anaconda and use the conda environments can be found in the anaconda documentation for:\n\n\n\n\n\n\nInstallation\n\n\n\n\n\n\nGetting started",
            "title": "Conda Pacakge Management"
        },
        {
            "location": "/conda/#11-conda-package-management",
            "text": "CONDA is a system agnostic software package management system based on\nthe Anaconda python distribution to ensure that a software and all its\ndependencies are bundled together. These conda packages can be\ndownloaded from various publicly available repositories called channels  and one such channel for bio-informatics tools is bioconda.  For ensuring reproducibily, we have established a publicly accessible\nchannel for all programs that are included with wrappers within the\nbioflows tool accessible through the  compbiocore channel <https://anaconda.org/compbiocore/> _. In this channel, we have provided conda packages of all software used including\nthe bioflows package itself. To download the packages or the bioflows tool use the command into your conda environment:      conda install -c compbiocore /pkg_name/  More detailed instructions on how to install anaconda and use the conda environments can be found in the anaconda documentation for:    Installation    Getting started",
            "title": "1.1 Conda Package Management"
        },
        {
            "location": "/tutorials/",
            "text": "2 BioFlows Tutorials\n\n\nThis section provides an overview of how to run pre-defined workflows using\nthe \nbioflows\n package. The tutorials are based on presuming that the analysis is\nconducted on the Brown \nCCV\n compute cluster, to use on other systems please\ncheck the installation instructions for setting up your environment. Currently, we have implemented an RNA-seq\nworkflow using the GSNAP RNAseq aligner. This will be updated as new\nworkflows and enhnacements are made to the BioFlows package.",
            "title": "Bioflow Tutorials"
        },
        {
            "location": "/tutorials/#2-bioflows-tutorials",
            "text": "This section provides an overview of how to run pre-defined workflows using\nthe  bioflows  package. The tutorials are based on presuming that the analysis is\nconducted on the Brown  CCV  compute cluster, to use on other systems please\ncheck the installation instructions for setting up your environment. Currently, we have implemented an RNA-seq\nworkflow using the GSNAP RNAseq aligner. This will be updated as new\nworkflows and enhnacements are made to the BioFlows package.",
            "title": "2 BioFlows Tutorials"
        },
        {
            "location": "/setup/",
            "text": "2.1 Setup the Environment for bioflows\n\n\nFirst make sure the conda environment is setup in your PATH\nvariable. In your CCV console type\n\n\n    \necho\n \n$PATH\n\n\n\n\n\n\nand you should see \n/gpfs/data/cbc/cbc_conda_v1/bin/\n as the first\nelement in the list of paths in your output.\n\n\n\n\nIf  \n/gpfs/data/cbc/cbc_conda_v1/bin/\n is not the first element in the\n      list then use the command\n\n\n```bash\n    export PATH=/gpfs/data/cbc/cbc_conda_v1/bin/:$PATH\n\n\n\n\n>   This will add  `/gpfs/data/cbc/cbc_conda_v1/bin/` to the beginning of\n    your `PATH` variable\n\n\nFor convenience we will use `/users/username` as the working directory and you should modify\naccordingly.\n\nThese scripts should be run in a persistent terminal session and we will\nuse GNU screen to do that, so that the we can disconnnect from our ssh\nsessions for long running jobs. To learn more on how to use screen use\nthe following link\n[gnu screen tutorial] (https://www.linode.com/docs/networking/ssh/using-gnu-screen-to-manage-persistent-terminal-sessions)\n\n\nStart a screen session naming it `test\\_bioflows` as below\n\n```bash\n    screen -S test_bioflows\n\n\n\n\n\nonce you are in your screen session you set up your python environment\nwith the following commands\n\n\n    \nsource\n activate bflows\n\n\n\n\n\nNow you are ready to run the predefined RNAseq workflow.",
            "title": "Setup the Enviroment for Bioflows"
        },
        {
            "location": "/setup/#21-setup-the-environment-for-bioflows",
            "text": "First make sure the conda environment is setup in your PATH\nvariable. In your CCV console type       echo   $PATH   and you should see  /gpfs/data/cbc/cbc_conda_v1/bin/  as the first\nelement in the list of paths in your output.   If   /gpfs/data/cbc/cbc_conda_v1/bin/  is not the first element in the\n      list then use the command  ```bash\n    export PATH=/gpfs/data/cbc/cbc_conda_v1/bin/:$PATH   >   This will add  `/gpfs/data/cbc/cbc_conda_v1/bin/` to the beginning of\n    your `PATH` variable\n\n\nFor convenience we will use `/users/username` as the working directory and you should modify\naccordingly.\n\nThese scripts should be run in a persistent terminal session and we will\nuse GNU screen to do that, so that the we can disconnnect from our ssh\nsessions for long running jobs. To learn more on how to use screen use\nthe following link\n[gnu screen tutorial] (https://www.linode.com/docs/networking/ssh/using-gnu-screen-to-manage-persistent-terminal-sessions)\n\n\nStart a screen session naming it `test\\_bioflows` as below\n\n```bash\n    screen -S test_bioflows  once you are in your screen session you set up your python environment\nwith the following commands       source  activate bflows  Now you are ready to run the predefined RNAseq workflow.",
            "title": "2.1 Setup the Environment for bioflows"
        },
        {
            "location": "/tutorial1/",
            "text": "2.2 Tutorial 1 - RNAseq with GSNAP\n\n\nThis tutorial show how to run a standard predefined RNA-seq analysis on\nthe using the bioflows tool. This workflow\nconsists of the following steps which have been implemented:\n\n\n\n\n\n\nFastqc\n: For QC of Raw Fastq reads\n\n\n\n\n\n\nGSNAP\n alignment of the reads to the reference genome of the reads\n\n\n\n\n\n\nQualimap\n tool for the QC of the aligments generated\n\n\n\n\n\n\nfeatureCounts\n tool for quantifying expression based on mapped reads\n\n\n\n\n\n\nSalmon\n tool for alignment free quantification of known transcripts\n\n\n\n\n\n\nBelow is a short how-to with all the commands\n\n\n2.2.1 Setup the YAML configuration file\n\n\nFor the test run we use the following YAML format control file. A\ndetailed documentation of the YAML file and all the options is shown\nhere. For the current example, we will discuss each section in detail  below\n\n\n    \nbioproject\n:\n \nProject_test_localhost\n\n    \nexperiment\n:\n \n:red:rnaseq_pilot\n\n    \nsample_manifest\n:\n\n      \nfastq_file\n:\n \nsampl_manifest_min.csv\n\n      \nmetadata\n:\n\n    \nrun_parms\n:\n\n      \nconda_command\n:\n \nsource activate /gpfs/runtime/opt/conda/envs/cbc_conda_test\n\n      \nwork_dir\n:\n \n/gpfs/scratch/aragaven/test_workflow\n\n      \nlog_dir\n:\n \nlogs\n\n      \npaired_end\n:\n \nFalse\n\n      \nlocal_targets\n:\n \nFalse\n\n      \ndb\n:\n \nsqlite\n\n      \ndb_loc\n:\n \n':memory:'\n\n      \nsaga_host\n:\n \nlocalhost\n\n      \nssh_user\n:\n \naragaven\n\n      \nsaga_scheduler\n:\n \nslurm\n\n      \ngtf_file\n:\n \n/gpfs/data/cbc/cbcollab/ref_tools/Ensembl_mus_GRCm38.p5_rel89/Mus_musculus.GRCm38.89.gtf\n\n    \nworkflow_sequence\n:\n\n      \nfastqc\n:\n \ndefault\n\n      \ngsnap\n:\n\n        \noptions\n:\n\n          \n-d\n:\n \nEnsembl_mus_GRCm38.p5_rel89\n\n          \n-s\n:\n \nMus_musculus.GRCm38.89.splicesites.iit\n\n        \njob_params\n:\n\n          \nncpus\n:\n \n16\n\n          \nmem\n:\n \n40000\n\n          \ntime\n:\n \n60\n\n      \nqualimap_rnaseq\n:\n \ndefault\n\n      \nhtseq-count\n:\n \ndefault\n\n\n\n\n\n\n2.2.2 YAML description\n\n\nbioproject\n\nThis will be an unique identifier for your project.\n    This is adopted from the NCBI SRA format structure, so if you use an\n    SRA dataset you can employ these ids\n\n\nexperiment\n\n    An identifier for your experiment such as RNA-seq,\n    ChIP-seq etc\n\n\nsample_manifest\n\n    This section contains two sections\n\n\n\n\nfastq_file\n\nThe full path to the sample to fastq map file.\n\nThis file is in a three column comma separated format with each line formatted as:\n\n\nsample_id, path_to_fastq_file_for_read1, path_to_fastq_file_for_read2\n  \n\n\n\n\nThe \nsample_id\n is unique and if you are \nusing single end data\n you just need\nto specify one column as shown below:\n\n\nsample_id, path_to_fastq_file\n\n\nmetadata\n\n        This is all the metadata associated with a given\n        \nsample_id\n if available such as gender, extraction date etc. This\n        should also be a CSV format file. Currently, not necessary as this\n        information is not yet used\n\n\nrun_parms\n\n    This section specifies the global parameters for the\n    current analysis\n\n\n\n\n\n\nconda_command\n\n  This is the command used to activate your conda environment.\n\n\n\n\n\n\nwork_dir\n\nThe working directory for analysis usually created on  \ngpfs/scratch\n\n\n\n\n\n\nlog_dir\n\nThe subdirectory for all the log files.\n\n\n\n\n\n\npaired_end\n\nWhether data consists of paired end reads or single end reads (True/False).\n\n\n\n\n\n\nlocal_targets\n\nWhether this worklfow is being run from a local machine.\n\n\n\n\n\n\ndb\n\ndefault database engine to use ( sqlite)\n\n\n\n\n\n\ndb_loc\n\nlocation of the database ':memory:'\n\n\n\n\n\n\nsaga_host\n\nThe hostname if workflow is run from a local machine\n\n\n\n\n\n\nssh_user\n\nThe user name if workflow is run from a local machine\n\n\n\n\n\n\nsaga_scheduler\n\nThe scheduler being used, for CCV the value used here is :redtext:\n/slurm/\n\n\n\n\n\n\ngtf_file\n\nThe full path to the gtf file for gene annotations\n\n\n\n\n\n\nworkflow_sequence\n\n    This section specifies the sequence of tools to\n    be used and the options passed to tools as well as the job parameters\n    if using a scheduler such as slurm\n\n\n\n\n\n\nfastqc\n\nIf you want to use the default parameters use \ndefault\n else you can use any of the options provided by the\nprogram. See  the example for GSNAP below on how to do\nthat. See the documentation for the options for fastqc.\n\n\n\n\n\n\ngsnap\n\nHere we give an example of two sections as we need to\npass the index information to the aligner\n\n\n\n\n\n\noptions\n\n Specify program options here. In this example we\n specify the following  \n\n \n\n   \n\n     \n-d\n\n     \nThe genome index for GSNAP\n\n   \n\n   \n\n     \n-s\n\n     \nand the splicesites file location for GSNAP.\n\n   \n\n   \n\n   The format is exactly that as to what you would specify on the command line for the program\n\n\n\n\n\n\n```bash\n-d Ensembl_mus_GRCm38.p5_rel89\n-s Mus_musculus.GRCm38.89.splicesites.iit\n\n\nSee the documentation for the GSNAP program for more options\n\n- **job\\_params**  \nThis section specifies parameters for job submission such as memory, number of cores etc\n    - ncpus: 16\n\n    - mem: 40000\n\n    - time: 60\n\n- **qualimap\\_rnaseq**  \nRun the qualimap module for RNAseq with the **default** settings\n\n\nThe final YAML control file should look as below to run a test example. Only modify the parts\nthat are highlighted below to fill in your ownm values.\n\n```yaml\n    bioproject: Project_test_localhost\n    experiment: rnaseq_pilot\n    sample_manifest:\n      fastq_file: /users/:bluetext:`username/sample_manifest_min.csv`\n      metadata:\n    run_parms:\n      conda_command: source activate /gpfs/runtime/opt/conda/envs/cbc_conda_test\n      work_dir: /gpfs/scratch/'user/test_workflow'\n      log_dir: logs\n      paired_end: False\n      local_targets: False\n      db: sqlite\n      db_loc: \":memory:\"\n      saga_host: localhost\n      ssh_user: 'ccv username'\n      saga_scheduler: slurm\n      gtf_file: /gpfs/data/cbc/cbcollab/ref_tools/Ensembl_hg_GRCh37_rel87/Homo_sapiens.GRCh37.87.gtf\n    workflow_sequence:\n      fastqc: default\n      gsnap:\n        options:\n          -d: Ensembl_Homo_sapiens_GRCh37\n          -s: Ensembl_Homo_sapiens.GRCh37.87.splicesites.iit\n        job_params:\n          ncpus: 16\n          mem: 40000\n        time: 60\n      qualimap_rnaseq: default\n      htseq-count: default\n\n\n\n\n\n2.2.3 How to run\n\n\nCopy the above into a text file and save it in \n/users/username\n as\ntest_run.yaml\n\n\nCopy the manifest below into a text file and save it in\n\n/users/username\n as sample_manifest_min.csv\n\n\n    samp_1299,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb2_1.gz,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb2_2.gz\n    samp_1214,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb_1.gz,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb_2.gz\n\n\n\n\n\nNow in your screen session run the following commands to setup your\nenvironment if you have not done so previously during the setup or you\nhave started a new screen session\n\n\n    \nsource\n activate bflows\n    bioflows-rnaseq test_run.yaml\n\n\n\n\n\nIn this case I have created a small test dataset with 10000 reads from a\ntest human RNAseq data, so it should run within the hour and you should\nsee that the alignments are completed.",
            "title": "Tutorial 1 - RNAseq with GSNAP"
        },
        {
            "location": "/tutorial1/#22-tutorial-1-rnaseq-with-gsnap",
            "text": "This tutorial show how to run a standard predefined RNA-seq analysis on\nthe using the bioflows tool. This workflow\nconsists of the following steps which have been implemented:    Fastqc : For QC of Raw Fastq reads    GSNAP  alignment of the reads to the reference genome of the reads    Qualimap  tool for the QC of the aligments generated    featureCounts  tool for quantifying expression based on mapped reads    Salmon  tool for alignment free quantification of known transcripts    Below is a short how-to with all the commands",
            "title": "2.2 Tutorial 1 - RNAseq with GSNAP"
        },
        {
            "location": "/tutorial1/#221-setup-the-yaml-configuration-file",
            "text": "For the test run we use the following YAML format control file. A\ndetailed documentation of the YAML file and all the options is shown\nhere. For the current example, we will discuss each section in detail  below       bioproject :   Project_test_localhost \n     experiment :   :red:rnaseq_pilot \n     sample_manifest : \n       fastq_file :   sampl_manifest_min.csv \n       metadata : \n     run_parms : \n       conda_command :   source activate /gpfs/runtime/opt/conda/envs/cbc_conda_test \n       work_dir :   /gpfs/scratch/aragaven/test_workflow \n       log_dir :   logs \n       paired_end :   False \n       local_targets :   False \n       db :   sqlite \n       db_loc :   ':memory:' \n       saga_host :   localhost \n       ssh_user :   aragaven \n       saga_scheduler :   slurm \n       gtf_file :   /gpfs/data/cbc/cbcollab/ref_tools/Ensembl_mus_GRCm38.p5_rel89/Mus_musculus.GRCm38.89.gtf \n     workflow_sequence : \n       fastqc :   default \n       gsnap : \n         options : \n           -d :   Ensembl_mus_GRCm38.p5_rel89 \n           -s :   Mus_musculus.GRCm38.89.splicesites.iit \n         job_params : \n           ncpus :   16 \n           mem :   40000 \n           time :   60 \n       qualimap_rnaseq :   default \n       htseq-count :   default",
            "title": "2.2.1 Setup the YAML configuration file"
        },
        {
            "location": "/tutorial1/#222-yaml-description",
            "text": "bioproject \nThis will be an unique identifier for your project.\n    This is adopted from the NCBI SRA format structure, so if you use an\n    SRA dataset you can employ these ids  experiment \n    An identifier for your experiment such as RNA-seq,\n    ChIP-seq etc  sample_manifest \n    This section contains two sections   fastq_file \nThe full path to the sample to fastq map file. \nThis file is in a three column comma separated format with each line formatted as:  sample_id, path_to_fastq_file_for_read1, path_to_fastq_file_for_read2      The  sample_id  is unique and if you are  using single end data  you just need\nto specify one column as shown below:  sample_id, path_to_fastq_file  metadata \n        This is all the metadata associated with a given\n         sample_id  if available such as gender, extraction date etc. This\n        should also be a CSV format file. Currently, not necessary as this\n        information is not yet used  run_parms \n    This section specifies the global parameters for the\n    current analysis    conda_command \n  This is the command used to activate your conda environment.    work_dir \nThe working directory for analysis usually created on   gpfs/scratch    log_dir \nThe subdirectory for all the log files.    paired_end \nWhether data consists of paired end reads or single end reads (True/False).    local_targets \nWhether this worklfow is being run from a local machine.    db \ndefault database engine to use ( sqlite)    db_loc \nlocation of the database ':memory:'    saga_host \nThe hostname if workflow is run from a local machine    ssh_user \nThe user name if workflow is run from a local machine    saga_scheduler \nThe scheduler being used, for CCV the value used here is :redtext: /slurm/    gtf_file \nThe full path to the gtf file for gene annotations    workflow_sequence \n    This section specifies the sequence of tools to\n    be used and the options passed to tools as well as the job parameters\n    if using a scheduler such as slurm    fastqc \nIf you want to use the default parameters use  default  else you can use any of the options provided by the\nprogram. See  the example for GSNAP below on how to do\nthat. See the documentation for the options for fastqc.    gsnap \nHere we give an example of two sections as we need to\npass the index information to the aligner    options \n Specify program options here. In this example we\n specify the following   \n  \n    \n      -d \n      The genome index for GSNAP \n    \n    \n      -s \n      and the splicesites file location for GSNAP. \n    \n    \n   The format is exactly that as to what you would specify on the command line for the program    ```bash\n-d Ensembl_mus_GRCm38.p5_rel89\n-s Mus_musculus.GRCm38.89.splicesites.iit  See the documentation for the GSNAP program for more options\n\n- **job\\_params**  \nThis section specifies parameters for job submission such as memory, number of cores etc\n    - ncpus: 16\n\n    - mem: 40000\n\n    - time: 60\n\n- **qualimap\\_rnaseq**  \nRun the qualimap module for RNAseq with the **default** settings\n\n\nThe final YAML control file should look as below to run a test example. Only modify the parts\nthat are highlighted below to fill in your ownm values.\n\n```yaml\n    bioproject: Project_test_localhost\n    experiment: rnaseq_pilot\n    sample_manifest:\n      fastq_file: /users/:bluetext:`username/sample_manifest_min.csv`\n      metadata:\n    run_parms:\n      conda_command: source activate /gpfs/runtime/opt/conda/envs/cbc_conda_test\n      work_dir: /gpfs/scratch/'user/test_workflow'\n      log_dir: logs\n      paired_end: False\n      local_targets: False\n      db: sqlite\n      db_loc: \":memory:\"\n      saga_host: localhost\n      ssh_user: 'ccv username'\n      saga_scheduler: slurm\n      gtf_file: /gpfs/data/cbc/cbcollab/ref_tools/Ensembl_hg_GRCh37_rel87/Homo_sapiens.GRCh37.87.gtf\n    workflow_sequence:\n      fastqc: default\n      gsnap:\n        options:\n          -d: Ensembl_Homo_sapiens_GRCh37\n          -s: Ensembl_Homo_sapiens.GRCh37.87.splicesites.iit\n        job_params:\n          ncpus: 16\n          mem: 40000\n        time: 60\n      qualimap_rnaseq: default\n      htseq-count: default",
            "title": "2.2.2 YAML description"
        },
        {
            "location": "/tutorial1/#223-how-to-run",
            "text": "Copy the above into a text file and save it in  /users/username  as\ntest_run.yaml  Copy the manifest below into a text file and save it in /users/username  as sample_manifest_min.csv      samp_1299,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb2_1.gz,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb2_2.gz\n    samp_1214,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb_1.gz,/gpfs/scratch/aragaven/rnaseq_test/PE_hg/Cb_2.gz  Now in your screen session run the following commands to setup your\nenvironment if you have not done so previously during the setup or you\nhave started a new screen session       source  activate bflows\n    bioflows-rnaseq test_run.yaml  In this case I have created a small test dataset with 10000 reads from a\ntest human RNAseq data, so it should run within the hour and you should\nsee that the alignments are completed.",
            "title": "2.2.3 How to run"
        },
        {
            "location": "/wrappers/",
            "text": "3 Wrappers\n\n\nThis section provides an overview of all the bioinformatic programs\nthat currenlty have wrappers implemented internally in BioFlows. For\neach tool all the options are shown and any of these options can be\nprovided under options in the YAML file.\n\n\n3.1 Fastqc\n\n\nFastqc is a java program to undertake QC for fastq reads produced by\nNGS, primarily illumina sequencing. More details on the tool as well\nas the documentation from the original developers is available from the\n\nFastqc\n\nwebsite. The following options are\ncurrently available through the fastqc program wrapper in the bioflows package\n\n\nfastqc -h",
            "title": "Fastqc"
        },
        {
            "location": "/wrappers/#3-wrappers",
            "text": "This section provides an overview of all the bioinformatic programs\nthat currenlty have wrappers implemented internally in BioFlows. For\neach tool all the options are shown and any of these options can be\nprovided under options in the YAML file.",
            "title": "3 Wrappers"
        },
        {
            "location": "/wrappers/#31-fastqc",
            "text": "Fastqc is a java program to undertake QC for fastq reads produced by\nNGS, primarily illumina sequencing. More details on the tool as well\nas the documentation from the original developers is available from the Fastqc \nwebsite. The following options are\ncurrently available through the fastqc program wrapper in the bioflows package  fastqc -h",
            "title": "3.1 Fastqc"
        },
        {
            "location": "/gsnap/",
            "text": "3.2 GSNAP\n\n\nGSNAP is a splice aware RNAseq aligner, which is consistently among\nthe top aligners in the DREAM challenge (ref required).\n\n\ngsnap --help",
            "title": "GSNAP"
        },
        {
            "location": "/gsnap/#32-gsnap",
            "text": "GSNAP is a splice aware RNAseq aligner, which is consistently among\nthe top aligners in the DREAM challenge (ref required).  gsnap --help",
            "title": "3.2 GSNAP"
        },
        {
            "location": "/qualimap/",
            "text": "3.3 Qualimap\n\n\nQualimap is the suite of tools for generating metrics associated with\nalginment of fastq reads. This tool provides multiple modules\nincluding a module for collecting metrics to RNA-seq alignments. We\nuse the rnaseq module for generating metrics towards QC of the\nalignments.\n\n\nqualimap rnaseq --help",
            "title": "Qualimap"
        },
        {
            "location": "/qualimap/#33-qualimap",
            "text": "Qualimap is the suite of tools for generating metrics associated with\nalginment of fastq reads. This tool provides multiple modules\nincluding a module for collecting metrics to RNA-seq alignments. We\nuse the rnaseq module for generating metrics towards QC of the\nalignments.  qualimap rnaseq --help",
            "title": "3.3 Qualimap"
        },
        {
            "location": "/htseq/",
            "text": "3.4 HTSeq Counts\n\n\nThis script takes one or more alignment files in SAM/BAM format and a feature\nfile in GFF format and calculates for each feature the number of reads mapping\nto it. See \nthe htseq docs\n for\ndetails.\n\nbash  \nhtseq-count -h",
            "title": "HTSeq Counts"
        },
        {
            "location": "/htseq/#34-htseq-counts",
            "text": "This script takes one or more alignment files in SAM/BAM format and a feature\nfile in GFF format and calculates for each feature the number of reads mapping\nto it. See  the htseq docs  for\ndetails. bash  \nhtseq-count -h",
            "title": "3.4 HTSeq Counts"
        }
    ]
}